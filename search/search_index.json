{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"EncryptedStorage \u00b6 An Android library for creating encrypted Files and SharedPreferences Get started! \u00b6 Other Projects Using It \u00b6 PinAuthentication Android Library Info Add your project to the list by submitting a PR! Edit This Document License \u00b6 Copyright \u00a9 2020 Matthew Nelson This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see here .","title":"Overview"},{"location":"#encryptedstorage","text":"An Android library for creating encrypted Files and SharedPreferences","title":"EncryptedStorage"},{"location":"#get-started","text":"","title":"Get started!"},{"location":"#other-projects-using-it","text":"PinAuthentication Android Library Info Add your project to the list by submitting a PR! Edit This Document","title":"Other Projects Using It"},{"location":"#license","text":"Copyright \u00a9 2020 Matthew Nelson This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version. This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details. You should have received a copy of the GNU General Public License along with this program. If not, see here .","title":"License "},{"location":"changelog/","text":"Change Log \u00b6 Version 2.0.0 (2020-10-14) \u00b6 Bumps Dependencies [e5f5aa5] Version 2.0.0 (2020-08-11) \u00b6 BugFix: Removes equal operator from methods that return void [bd98ec0] Java projects were being returned kotlin.Unit which was causing errors. Renamed the File class to EFile [8d3c3bc] Moved the Prefs and EFile classes to their own files instead of under EncryptedStorage : [c010c18] [d0d7b9b] Added Throw annotations to methods [44f05bd] Added JvmStatic annotations to methods/variables [15b4159] Dependency version bumps: gradle maven publish 11.1 -> 12.0 [8b48868] gradle 4.0.0 -> 4.0.1 [67034a3] Added a new module for testing purposes, to fake the AndroidKeystore. Version 1.0.2 (2020-06-20) \u00b6 Removes sealed class modifier in lieu of a private constructor for inhibiting instantiation [14e35dc] Adds espresso tests for EncryptedSharedPreferences [b4ec5ac] Version 1.0.1 (2020-05-31) \u00b6 Prefs.clear method now returns this such that chaining calls can be had [2328a5e] The Prefs class and File class now extend EncryptedStorage sealed class [3242640] Updates documentation Version 1.0.0 (2020-05-29) \u00b6 Initial Release","title":"Change Log"},{"location":"changelog/#change-log","text":"","title":"Change Log"},{"location":"changelog/#version-200-2020-10-14","text":"Bumps Dependencies [e5f5aa5]","title":"Version 2.0.0 (2020-10-14)"},{"location":"changelog/#version-200-2020-08-11","text":"BugFix: Removes equal operator from methods that return void [bd98ec0] Java projects were being returned kotlin.Unit which was causing errors. Renamed the File class to EFile [8d3c3bc] Moved the Prefs and EFile classes to their own files instead of under EncryptedStorage : [c010c18] [d0d7b9b] Added Throw annotations to methods [44f05bd] Added JvmStatic annotations to methods/variables [15b4159] Dependency version bumps: gradle maven publish 11.1 -> 12.0 [8b48868] gradle 4.0.0 -> 4.0.1 [67034a3] Added a new module for testing purposes, to fake the AndroidKeystore.","title":"Version 2.0.0 (2020-08-11)"},{"location":"changelog/#version-102-2020-06-20","text":"Removes sealed class modifier in lieu of a private constructor for inhibiting instantiation [14e35dc] Adds espresso tests for EncryptedSharedPreferences [b4ec5ac]","title":"Version 1.0.2 (2020-06-20)"},{"location":"changelog/#version-101-2020-05-31","text":"Prefs.clear method now returns this such that chaining calls can be had [2328a5e] The Prefs class and File class now extend EncryptedStorage sealed class [3242640] Updates documentation","title":"Version 1.0.1 (2020-05-31)"},{"location":"changelog/#version-100-2020-05-29","text":"Initial Release","title":"Version 1.0.0 (2020-05-29)"},{"location":"get_started/","text":"Get Started \u00b6 Requirements \u00b6 encrypted-storage Minimum API 23 fake-keystore Minimum API 16 Implementation: Production \u00b6 In your App module\u2019s build.gradle file, add the following to the dependencies block: implementation 'io.matthewnelson.encrypted-storage:encrypted-storage:2.0.1' Instantiation // Unencrypted Prefs val prefs = Prefs . createUnencrypted ( \"MyClearTextPrefs\" , context ) // Encrypted Prefs val encryptedPrefs = Prefs . createEncrypted ( \"MyEncryptedPrefs\" , context ) // Encrypted File val encryptedFile = EFile . createEncrypted ( File ( \"${context.filesDir.absolutePath}/MyEncryptedFile\" ), context ) Implementation: Testing \u00b6 In your App module\u2019s build.gradle file, add the following to the dependencies block: testImplementation 'io.matthewnelson.encrypted-storage:fake-keystore:2.0.1' Add to your unit test the following: companion object { @JvmStatic @BeforeClass fun beforeClass () { FakeAndroidKeyStore . setup } } Info Special thanks to Matthew Dolan! See his Medium article regarding unit testing with Jetpack Security here","title":"Get Started"},{"location":"get_started/#get-started","text":"","title":"Get Started"},{"location":"get_started/#requirements","text":"encrypted-storage Minimum API 23 fake-keystore Minimum API 16","title":"Requirements"},{"location":"get_started/#implementation-production","text":"In your App module\u2019s build.gradle file, add the following to the dependencies block: implementation 'io.matthewnelson.encrypted-storage:encrypted-storage:2.0.1' Instantiation // Unencrypted Prefs val prefs = Prefs . createUnencrypted ( \"MyClearTextPrefs\" , context ) // Encrypted Prefs val encryptedPrefs = Prefs . createEncrypted ( \"MyEncryptedPrefs\" , context ) // Encrypted File val encryptedFile = EFile . createEncrypted ( File ( \"${context.filesDir.absolutePath}/MyEncryptedFile\" ), context )","title":"Implementation: Production"},{"location":"get_started/#implementation-testing","text":"In your App module\u2019s build.gradle file, add the following to the dependencies block: testImplementation 'io.matthewnelson.encrypted-storage:fake-keystore:2.0.1' Add to your unit test the following: companion object { @JvmStatic @BeforeClass fun beforeClass () { FakeAndroidKeyStore . setup } } Info Special thanks to Matthew Dolan! See his Medium article regarding unit testing with Jetpack Security here","title":"Implementation: Testing"},{"location":"releasing/","text":"Releasing EncryptedStorage \u00b6 Create a local release branch from master git checkout master git pull git checkout -b release_2.0.2 Update VERSION_NAME (remove -SNAPSHOT ) in gradle.properties VERSION_NAME=2.0.2 Update the current version and next version in mkdocs.yml extra: encrypted_storage: release: '2.0.2' next_release: 'REPLACE_WITH_NEXT_VERSION_NUMBER' Generate the Dokka docs rm -rf docs/encrypted-storage ./gradlew encrypted-storage:dokka Update docs/changelog.md after checking out all changes: compare changes Take one last look git diff Commit all local changes and PGP sign git commit -S -am \"Prepare 2.0.2 release\" Perform a clean build ./gradlew clean ./gradlew build Create a PGP signed tag, and push it git tag -s 2.0.2 -m \"Release v2.0.2\" git push origin 2.0.2 Make sure you have valid credentials in ~/.gradle/gradle.properties to sign and upload the artifacts SONATYPE_NEXUS_USERNAME=<Your Username> SONATYPE_NEXUS_PASSWORD=<Your Password> signing.gnupg.homeDir=/home/matthew/.gnupg/ signing.gnupg.optionsFile=/home/matthew/.gnupg/gpg.conf signing.gnupg.keyName=0x61471B8AB3890961 Upload the artifacts to Sonatype OSS Nexus ./gradlew uploadArchives --no-daemon --no-parallel Release to Maven Central Login to Sonatype OSS Nexus: oss.sonatype.org Click on Staging Repositories Scroll to the bottom, you should see an entry named iomatthewnelson-XXXX Check the box next to the iomatthewnelson-XXXX entry, click Close then Confirm Wait a bit, hit Refresh , until the Status for that column changes to Closed . Check the box next to the iomatthewnelson-XXXX entry, click Release then Confirm Merge the release branch to master git checkout master git pull git merge --no-ff -S release_2.0.2 Update VERSION_NAME (increase version and add -SNAPSHOT ) and VERSION_CODE in gradle.properties VERSION_NAME=REPLACE_WITH_NEXT_VERSION_NUMBER-SNAPSHOT VERSION_CODE=INCREMENT Commit your changes and sign with PGP keys git commit -S -am \"Prepare for next development iteration\" Push your changes git push Wait for the release to become available on Maven Central , then: Redeploy the docs: pipenv shell mkdocs serve to check locally mkdocs gh-deploy to deploy exit Go to the Draft a new release page, enter the release name (2.0.2) as tag and title, and have the description point to the changelog. You can find the direct anchor URL from the Change Log page on the doc site.","title":"Releasing"},{"location":"releasing/#releasing-encryptedstorage","text":"Create a local release branch from master git checkout master git pull git checkout -b release_2.0.2 Update VERSION_NAME (remove -SNAPSHOT ) in gradle.properties VERSION_NAME=2.0.2 Update the current version and next version in mkdocs.yml extra: encrypted_storage: release: '2.0.2' next_release: 'REPLACE_WITH_NEXT_VERSION_NUMBER' Generate the Dokka docs rm -rf docs/encrypted-storage ./gradlew encrypted-storage:dokka Update docs/changelog.md after checking out all changes: compare changes Take one last look git diff Commit all local changes and PGP sign git commit -S -am \"Prepare 2.0.2 release\" Perform a clean build ./gradlew clean ./gradlew build Create a PGP signed tag, and push it git tag -s 2.0.2 -m \"Release v2.0.2\" git push origin 2.0.2 Make sure you have valid credentials in ~/.gradle/gradle.properties to sign and upload the artifacts SONATYPE_NEXUS_USERNAME=<Your Username> SONATYPE_NEXUS_PASSWORD=<Your Password> signing.gnupg.homeDir=/home/matthew/.gnupg/ signing.gnupg.optionsFile=/home/matthew/.gnupg/gpg.conf signing.gnupg.keyName=0x61471B8AB3890961 Upload the artifacts to Sonatype OSS Nexus ./gradlew uploadArchives --no-daemon --no-parallel Release to Maven Central Login to Sonatype OSS Nexus: oss.sonatype.org Click on Staging Repositories Scroll to the bottom, you should see an entry named iomatthewnelson-XXXX Check the box next to the iomatthewnelson-XXXX entry, click Close then Confirm Wait a bit, hit Refresh , until the Status for that column changes to Closed . Check the box next to the iomatthewnelson-XXXX entry, click Release then Confirm Merge the release branch to master git checkout master git pull git merge --no-ff -S release_2.0.2 Update VERSION_NAME (increase version and add -SNAPSHOT ) and VERSION_CODE in gradle.properties VERSION_NAME=REPLACE_WITH_NEXT_VERSION_NUMBER-SNAPSHOT VERSION_CODE=INCREMENT Commit your changes and sign with PGP keys git commit -S -am \"Prepare for next development iteration\" Push your changes git push Wait for the release to become available on Maven Central , then: Redeploy the docs: pipenv shell mkdocs serve to check locally mkdocs gh-deploy to deploy exit Go to the Draft a new release page, enter the release name (2.0.2) as tag and title, and have the description point to the changelog. You can find the direct anchor URL from the Change Log page on the doc site.","title":"Releasing EncryptedStorage"},{"location":"encrypted-storage/","text":"encrypted-storage Packages \u00b6 Name Summary io.matthewnelson.encrypted_storage Index \u00b6 All Types","title":"Index"},{"location":"encrypted-storage/#packages","text":"Name Summary io.matthewnelson.encrypted_storage","title":"Packages"},{"location":"encrypted-storage/#index","text":"All Types","title":"Index"},{"location":"encrypted-storage/alltypes/","text":"All Types \u00b6 Name Summary io.matthewnelson.encrypted_storage.EFile \u00b6 Helper class for creating encrypted Files. | io.matthewnelson.encrypted_storage.Prefs \u00b6 SharedPreferences helper class that allows for instantiation of either regular cleartext SharedPreferences, or EncryptedSharedPreferences.","title":"Index"},{"location":"encrypted-storage/alltypes/#all-types","text":"Name Summary","title":"All Types"},{"location":"encrypted-storage/alltypes/#iomatthewnelsonencrypted_storageefile","text":"Helper class for creating encrypted Files. |","title":"io.matthewnelson.encrypted_storage.EFile"},{"location":"encrypted-storage/alltypes/#iomatthewnelsonencrypted_storageprefs","text":"SharedPreferences helper class that allows for instantiation of either regular cleartext SharedPreferences, or EncryptedSharedPreferences.","title":"io.matthewnelson.encrypted_storage.Prefs"},{"location":"encrypted-storage/io.matthewnelson.encrypted_storage/","text":"encrypted-storage / io.matthewnelson.encrypted_storage Package io.matthewnelson.encrypted_storage \u00b6 Types \u00b6 Name Summary EFile Helper class for creating encrypted Files. class EFile Prefs SharedPreferences helper class that allows for instantiation of either regular cleartext SharedPreferences, or EncryptedSharedPreferences. class Prefs","title":"EncryptedStorage Docs"},{"location":"encrypted-storage/io.matthewnelson.encrypted_storage/#package-iomatthewnelsonencrypted_storage","text":"","title":"Package io.matthewnelson.encrypted_storage"},{"location":"encrypted-storage/io.matthewnelson.encrypted_storage/#types","text":"Name Summary EFile Helper class for creating encrypted Files. class EFile Prefs SharedPreferences helper class that allows for instantiation of either regular cleartext SharedPreferences, or EncryptedSharedPreferences. class Prefs","title":"Types"},{"location":"encrypted-storage/io.matthewnelson.encrypted_storage/-e-file/","text":"encrypted-storage / io.matthewnelson.encrypted_storage / EFile EFile \u00b6 class EFile (source) Helper class for creating encrypted Files. See EFile.Companion.createEncrypted for instantiation methods. Properties \u00b6 Name Summary file val file: File keysetAlias val keysetAlias: String ? keysetPrefName val keysetPrefName: String ? Functions \u00b6 Name Summary openFileInput Opens a FileInputStream that reads encrypted files based on the previous settings. fun openFileInput(): FileInputStream openFileOutput Opens a FileOutputStream for writing that automatically encrypts the data based on the provided settings. fun openFileOutput(): FileOutputStream Companion Object Functions \u00b6 Name Summary createEncrypted Required fields only fun createEncrypted(file: File , context: Context ): EFile Required fields + custom keysetAlias fun createEncrypted(file: File , context: Context , keysetAlias: String ): EFile Required fields + custom keysetPrefName fun createEncrypted(file: File , keysetPrefName: String , context: Context ): EFile Required: file , context Optional: keysetAlias , keysetPrefName fun createEncrypted(file: File , context: Context , keysetAlias: String , keysetPrefName: String ): EFile","title":"Index"},{"location":"encrypted-storage/io.matthewnelson.encrypted_storage/-e-file/#efile","text":"class EFile (source) Helper class for creating encrypted Files. See EFile.Companion.createEncrypted for instantiation methods.","title":"EFile"},{"location":"encrypted-storage/io.matthewnelson.encrypted_storage/-e-file/#properties","text":"Name Summary file val file: File keysetAlias val keysetAlias: String ? keysetPrefName val keysetPrefName: String ?","title":"Properties"},{"location":"encrypted-storage/io.matthewnelson.encrypted_storage/-e-file/#functions","text":"Name Summary openFileInput Opens a FileInputStream that reads encrypted files based on the previous settings. fun openFileInput(): FileInputStream openFileOutput Opens a FileOutputStream for writing that automatically encrypts the data based on the provided settings. fun openFileOutput(): FileOutputStream","title":"Functions"},{"location":"encrypted-storage/io.matthewnelson.encrypted_storage/-e-file/#companion-object-functions","text":"Name Summary createEncrypted Required fields only fun createEncrypted(file: File , context: Context ): EFile Required fields + custom keysetAlias fun createEncrypted(file: File , context: Context , keysetAlias: String ): EFile Required fields + custom keysetPrefName fun createEncrypted(file: File , keysetPrefName: String , context: Context ): EFile Required: file , context Optional: keysetAlias , keysetPrefName fun createEncrypted(file: File , context: Context , keysetAlias: String , keysetPrefName: String ): EFile","title":"Companion Object Functions"},{"location":"encrypted-storage/io.matthewnelson.encrypted_storage/-e-file/create-encrypted/","text":"encrypted-storage / io.matthewnelson.encrypted_storage / EFile / createEncrypted createEncrypted \u00b6 @JvmStatic fun createEncrypted(file: File , context: Context ): EFile (source) Required fields only @JvmStatic fun createEncrypted(file: File , context: Context , keysetAlias: String ): EFile (source) Required fields + custom keysetAlias @JvmStatic fun createEncrypted(file: File , keysetPrefName: String , context: Context ): EFile (source) Required fields + custom keysetPrefName @JvmStatic fun createEncrypted(file: File , context: Context , keysetAlias: String , keysetPrefName: String ): EFile (source) Required: file , context Optional: keysetAlias , keysetPrefName Parameters \u00b6 file - java.io.File - REQUIRED FIELD context - Context - REQUIRED FIELD keysetAlias - String - OPTIONAL FIELD keysetPrefName - String - OPTIONAL FIELD Exceptions \u00b6 java.security.GeneralSecurityException - when a bad master key or keyset has been used java.io.IOException - when the file already exists or is not available for writing Return EFile","title":"Create encrypted"},{"location":"encrypted-storage/io.matthewnelson.encrypted_storage/-e-file/create-encrypted/#createencrypted","text":"@JvmStatic fun createEncrypted(file: File , context: Context ): EFile (source) Required fields only @JvmStatic fun createEncrypted(file: File , context: Context , keysetAlias: String ): EFile (source) Required fields + custom keysetAlias @JvmStatic fun createEncrypted(file: File , keysetPrefName: String , context: Context ): EFile (source) Required fields + custom keysetPrefName @JvmStatic fun createEncrypted(file: File , context: Context , keysetAlias: String , keysetPrefName: String ): EFile (source) Required: file , context Optional: keysetAlias , keysetPrefName","title":"createEncrypted"},{"location":"encrypted-storage/io.matthewnelson.encrypted_storage/-e-file/create-encrypted/#parameters","text":"file - java.io.File - REQUIRED FIELD context - Context - REQUIRED FIELD keysetAlias - String - OPTIONAL FIELD keysetPrefName - String - OPTIONAL FIELD","title":"Parameters"},{"location":"encrypted-storage/io.matthewnelson.encrypted_storage/-e-file/create-encrypted/#exceptions","text":"java.security.GeneralSecurityException - when a bad master key or keyset has been used java.io.IOException - when the file already exists or is not available for writing Return EFile","title":"Exceptions"},{"location":"encrypted-storage/io.matthewnelson.encrypted_storage/-e-file/file/","text":"encrypted-storage / io.matthewnelson.encrypted_storage / EFile / file file \u00b6 val file: File (source)","title":"File"},{"location":"encrypted-storage/io.matthewnelson.encrypted_storage/-e-file/file/#file","text":"val file: File (source)","title":"file"},{"location":"encrypted-storage/io.matthewnelson.encrypted_storage/-e-file/keyset-alias/","text":"encrypted-storage / io.matthewnelson.encrypted_storage / EFile / keysetAlias keysetAlias \u00b6 val keysetAlias: String ? (source)","title":"Keyset alias"},{"location":"encrypted-storage/io.matthewnelson.encrypted_storage/-e-file/keyset-alias/#keysetalias","text":"val keysetAlias: String ? (source)","title":"keysetAlias"},{"location":"encrypted-storage/io.matthewnelson.encrypted_storage/-e-file/keyset-pref-name/","text":"encrypted-storage / io.matthewnelson.encrypted_storage / EFile / keysetPrefName keysetPrefName \u00b6 val keysetPrefName: String ? (source)","title":"Keyset pref name"},{"location":"encrypted-storage/io.matthewnelson.encrypted_storage/-e-file/keyset-pref-name/#keysetprefname","text":"val keysetPrefName: String ? (source)","title":"keysetPrefName"},{"location":"encrypted-storage/io.matthewnelson.encrypted_storage/-e-file/open-file-input/","text":"encrypted-storage / io.matthewnelson.encrypted_storage / EFile / openFileInput openFileInput \u00b6 fun openFileInput(): FileInputStream (source) Opens a FileInputStream that reads encrypted files based on the previous settings. Please ensure that the same master key and keyset are used to decrypt or it will cause failures. Exceptions \u00b6 java.security.GeneralSecurityException - when a bad master key or keyset has been used java.io.IOException - when the file already exists or is not available for writing Return FileInputStream The input stream to read previously encrypted data.","title":"Open file input"},{"location":"encrypted-storage/io.matthewnelson.encrypted_storage/-e-file/open-file-input/#openfileinput","text":"fun openFileInput(): FileInputStream (source) Opens a FileInputStream that reads encrypted files based on the previous settings. Please ensure that the same master key and keyset are used to decrypt or it will cause failures.","title":"openFileInput"},{"location":"encrypted-storage/io.matthewnelson.encrypted_storage/-e-file/open-file-input/#exceptions","text":"java.security.GeneralSecurityException - when a bad master key or keyset has been used java.io.IOException - when the file already exists or is not available for writing Return FileInputStream The input stream to read previously encrypted data.","title":"Exceptions"},{"location":"encrypted-storage/io.matthewnelson.encrypted_storage/-e-file/open-file-output/","text":"encrypted-storage / io.matthewnelson.encrypted_storage / EFile / openFileOutput openFileOutput \u00b6 fun openFileOutput(): FileOutputStream (source) Opens a FileOutputStream for writing that automatically encrypts the data based on the provided settings. Please ensure that the same master key and keyset are used to decrypt or it will cause failures. Exceptions \u00b6 java.security.GeneralSecurityException - when a bad master key or keyset has been used java.io.IOException - when the file already exists or is not available for writing Return The FileOutputStream that encrypts all data.","title":"Open file output"},{"location":"encrypted-storage/io.matthewnelson.encrypted_storage/-e-file/open-file-output/#openfileoutput","text":"fun openFileOutput(): FileOutputStream (source) Opens a FileOutputStream for writing that automatically encrypts the data based on the provided settings. Please ensure that the same master key and keyset are used to decrypt or it will cause failures.","title":"openFileOutput"},{"location":"encrypted-storage/io.matthewnelson.encrypted_storage/-e-file/open-file-output/#exceptions","text":"java.security.GeneralSecurityException - when a bad master key or keyset has been used java.io.IOException - when the file already exists or is not available for writing Return The FileOutputStream that encrypts all data.","title":"Exceptions"},{"location":"encrypted-storage/io.matthewnelson.encrypted_storage/-prefs/","text":"encrypted-storage / io.matthewnelson.encrypted_storage / Prefs Prefs \u00b6 class Prefs (source) SharedPreferences helper class that allows for instantiation of either regular cleartext SharedPreferences, or EncryptedSharedPreferences. See Prefs.Companion.createEncrypted and Prefs.Companion.createUnencrypted for instantiation methods. Properties \u00b6 Name Summary prefsName val prefsName: String Functions \u00b6 Name Summary clear Clears all data within SharedPreferences. fun clear(): Prefs contains Checks if SharedPreferences contains the defined key. fun contains(key: String ): Boolean getAll Retrieve all values from the preferences. Throws a NPE if nothing exists in SharedPreferences. fun getAll(): Map < String , *> read Prior to retrieving a Boolean value, will check if SharedPreferences contains the key. If it does not contain the key it will return null instead. fun read(key: String ): Boolean ? Boolean fun read(key: String , returnIfInvalid: Boolean ): Boolean Float fun read(key: String , returnIfInvalid: Float ): Float Int fun read(key: String , returnIfInvalid: Int ): Int Long fun read(key: String , returnIfInvalid: Long ): Long Set? fun read(key: String , returnIfInvalid: Set < String >): Set < String >? String fun read(key: String , returnIfInvalid: String ): String ? registerOnSharedPreferenceChangeListener Registers an onChangeListener for SharedPreferences. fun registerOnSharedPreferenceChangeListener(listener: OnSharedPreferenceChangeListener ): Unit remove Removes the key value pair associated with the defined key. fun remove(key: String ): Prefs unregisterOnSharedPreferenceChangeListener Unregisters an onChangeListener for SharedPreferences. fun unregisterOnSharedPreferenceChangeListener(listener: OnSharedPreferenceChangeListener ): Unit write Boolean fun write(key: String , value: Boolean ): Prefs Float fun write(key: String , value: Float ): Prefs Int fun write(key: String , value: Int ): Prefs Long fun write(key: String , value: Long ): Prefs Set fun write(key: String , value: Set < String >): Prefs Writes the key value pair to SharedPreferences. Will try to write the kvp using commit() first, which if unsuccessful, will fall back to using apply() . fun write(key: String , value: String ): Prefs Companion Object Properties \u00b6 Name Summary INVALID_BOOLEAN const val INVALID_BOOLEAN: Boolean INVALID_FLOAT const val INVALID_FLOAT: Float INVALID_INT const val INVALID_INT: Int INVALID_LONG const val INVALID_LONG: Long INVALID_STRING const val INVALID_STRING: String INVALID_STRING_SET val INVALID_STRING_SET: Set < String > Companion Object Functions \u00b6 Name Summary createEncrypted Creates Prefs that will store data in an encrypted state, and decrypt that data for you. fun createEncrypted(encryptedPrefsName: String , context: Context ): Prefs createUnencrypted Creates Prefs that will store data in an **un**encrypted state fun createUnencrypted(prefsName: String , context: Context ): Prefs","title":"Index"},{"location":"encrypted-storage/io.matthewnelson.encrypted_storage/-prefs/#prefs","text":"class Prefs (source) SharedPreferences helper class that allows for instantiation of either regular cleartext SharedPreferences, or EncryptedSharedPreferences. See Prefs.Companion.createEncrypted and Prefs.Companion.createUnencrypted for instantiation methods.","title":"Prefs"},{"location":"encrypted-storage/io.matthewnelson.encrypted_storage/-prefs/#properties","text":"Name Summary prefsName val prefsName: String","title":"Properties"},{"location":"encrypted-storage/io.matthewnelson.encrypted_storage/-prefs/#functions","text":"Name Summary clear Clears all data within SharedPreferences. fun clear(): Prefs contains Checks if SharedPreferences contains the defined key. fun contains(key: String ): Boolean getAll Retrieve all values from the preferences. Throws a NPE if nothing exists in SharedPreferences. fun getAll(): Map < String , *> read Prior to retrieving a Boolean value, will check if SharedPreferences contains the key. If it does not contain the key it will return null instead. fun read(key: String ): Boolean ? Boolean fun read(key: String , returnIfInvalid: Boolean ): Boolean Float fun read(key: String , returnIfInvalid: Float ): Float Int fun read(key: String , returnIfInvalid: Int ): Int Long fun read(key: String , returnIfInvalid: Long ): Long Set? fun read(key: String , returnIfInvalid: Set < String >): Set < String >? String fun read(key: String , returnIfInvalid: String ): String ? registerOnSharedPreferenceChangeListener Registers an onChangeListener for SharedPreferences. fun registerOnSharedPreferenceChangeListener(listener: OnSharedPreferenceChangeListener ): Unit remove Removes the key value pair associated with the defined key. fun remove(key: String ): Prefs unregisterOnSharedPreferenceChangeListener Unregisters an onChangeListener for SharedPreferences. fun unregisterOnSharedPreferenceChangeListener(listener: OnSharedPreferenceChangeListener ): Unit write Boolean fun write(key: String , value: Boolean ): Prefs Float fun write(key: String , value: Float ): Prefs Int fun write(key: String , value: Int ): Prefs Long fun write(key: String , value: Long ): Prefs Set fun write(key: String , value: Set < String >): Prefs Writes the key value pair to SharedPreferences. Will try to write the kvp using commit() first, which if unsuccessful, will fall back to using apply() . fun write(key: String , value: String ): Prefs","title":"Functions"},{"location":"encrypted-storage/io.matthewnelson.encrypted_storage/-prefs/#companion-object-properties","text":"Name Summary INVALID_BOOLEAN const val INVALID_BOOLEAN: Boolean INVALID_FLOAT const val INVALID_FLOAT: Float INVALID_INT const val INVALID_INT: Int INVALID_LONG const val INVALID_LONG: Long INVALID_STRING const val INVALID_STRING: String INVALID_STRING_SET val INVALID_STRING_SET: Set < String >","title":"Companion Object Properties"},{"location":"encrypted-storage/io.matthewnelson.encrypted_storage/-prefs/#companion-object-functions","text":"Name Summary createEncrypted Creates Prefs that will store data in an encrypted state, and decrypt that data for you. fun createEncrypted(encryptedPrefsName: String , context: Context ): Prefs createUnencrypted Creates Prefs that will store data in an **un**encrypted state fun createUnencrypted(prefsName: String , context: Context ): Prefs","title":"Companion Object Functions"},{"location":"encrypted-storage/io.matthewnelson.encrypted_storage/-prefs/-i-n-v-a-l-i-d_-b-o-o-l-e-a-n/","text":"encrypted-storage / io.matthewnelson.encrypted_storage / Prefs / INVALID_BOOLEAN INVALID_BOOLEAN \u00b6 const val INVALID_BOOLEAN: Boolean (source)","title":" i n v a l i d  b o o l e a n"},{"location":"encrypted-storage/io.matthewnelson.encrypted_storage/-prefs/-i-n-v-a-l-i-d_-b-o-o-l-e-a-n/#invalid_boolean","text":"const val INVALID_BOOLEAN: Boolean (source)","title":"INVALID_BOOLEAN"},{"location":"encrypted-storage/io.matthewnelson.encrypted_storage/-prefs/-i-n-v-a-l-i-d_-f-l-o-a-t/","text":"encrypted-storage / io.matthewnelson.encrypted_storage / Prefs / INVALID_FLOAT INVALID_FLOAT \u00b6 const val INVALID_FLOAT: Float (source)","title":" i n v a l i d  f l o a t"},{"location":"encrypted-storage/io.matthewnelson.encrypted_storage/-prefs/-i-n-v-a-l-i-d_-f-l-o-a-t/#invalid_float","text":"const val INVALID_FLOAT: Float (source)","title":"INVALID_FLOAT"},{"location":"encrypted-storage/io.matthewnelson.encrypted_storage/-prefs/-i-n-v-a-l-i-d_-i-n-t/","text":"encrypted-storage / io.matthewnelson.encrypted_storage / Prefs / INVALID_INT INVALID_INT \u00b6 const val INVALID_INT: Int (source)","title":" i n v a l i d  i n t"},{"location":"encrypted-storage/io.matthewnelson.encrypted_storage/-prefs/-i-n-v-a-l-i-d_-i-n-t/#invalid_int","text":"const val INVALID_INT: Int (source)","title":"INVALID_INT"},{"location":"encrypted-storage/io.matthewnelson.encrypted_storage/-prefs/-i-n-v-a-l-i-d_-l-o-n-g/","text":"encrypted-storage / io.matthewnelson.encrypted_storage / Prefs / INVALID_LONG INVALID_LONG \u00b6 const val INVALID_LONG: Long (source)","title":" i n v a l i d  l o n g"},{"location":"encrypted-storage/io.matthewnelson.encrypted_storage/-prefs/-i-n-v-a-l-i-d_-l-o-n-g/#invalid_long","text":"const val INVALID_LONG: Long (source)","title":"INVALID_LONG"},{"location":"encrypted-storage/io.matthewnelson.encrypted_storage/-prefs/-i-n-v-a-l-i-d_-s-t-r-i-n-g/","text":"encrypted-storage / io.matthewnelson.encrypted_storage / Prefs / INVALID_STRING INVALID_STRING \u00b6 const val INVALID_STRING: String (source)","title":" i n v a l i d  s t r i n g"},{"location":"encrypted-storage/io.matthewnelson.encrypted_storage/-prefs/-i-n-v-a-l-i-d_-s-t-r-i-n-g/#invalid_string","text":"const val INVALID_STRING: String (source)","title":"INVALID_STRING"},{"location":"encrypted-storage/io.matthewnelson.encrypted_storage/-prefs/-i-n-v-a-l-i-d_-s-t-r-i-n-g_-s-e-t/","text":"encrypted-storage / io.matthewnelson.encrypted_storage / Prefs / INVALID_STRING_SET INVALID_STRING_SET \u00b6 @JvmStatic val INVALID_STRING_SET: Set < String > (source)","title":" i n v a l i d  s t r i n g  s e t"},{"location":"encrypted-storage/io.matthewnelson.encrypted_storage/-prefs/-i-n-v-a-l-i-d_-s-t-r-i-n-g_-s-e-t/#invalid_string_set","text":"@JvmStatic val INVALID_STRING_SET: Set < String > (source)","title":"INVALID_STRING_SET"},{"location":"encrypted-storage/io.matthewnelson.encrypted_storage/-prefs/clear/","text":"encrypted-storage / io.matthewnelson.encrypted_storage / Prefs / clear clear \u00b6 fun clear(): Prefs (source) Clears all data within SharedPreferences. If this method is called on the EncryptedSharedPreferences instantiation of Prefs , it will ensure that the encryption keys are replaced after clearing everything else (this is due to the androidx security-crypto\u2019s lack of implementation of this API call). Return Prefs for chaining multiple method calls together.","title":"Clear"},{"location":"encrypted-storage/io.matthewnelson.encrypted_storage/-prefs/clear/#clear","text":"fun clear(): Prefs (source) Clears all data within SharedPreferences. If this method is called on the EncryptedSharedPreferences instantiation of Prefs , it will ensure that the encryption keys are replaced after clearing everything else (this is due to the androidx security-crypto\u2019s lack of implementation of this API call). Return Prefs for chaining multiple method calls together.","title":"clear"},{"location":"encrypted-storage/io.matthewnelson.encrypted_storage/-prefs/contains/","text":"encrypted-storage / io.matthewnelson.encrypted_storage / Prefs / contains contains \u00b6 fun contains(key: String ): Boolean (source) Checks if SharedPreferences contains the defined key. Parameters \u00b6 key - String Return Boolean","title":"Contains"},{"location":"encrypted-storage/io.matthewnelson.encrypted_storage/-prefs/contains/#contains","text":"fun contains(key: String ): Boolean (source) Checks if SharedPreferences contains the defined key.","title":"contains"},{"location":"encrypted-storage/io.matthewnelson.encrypted_storage/-prefs/contains/#parameters","text":"key - String Return Boolean","title":"Parameters"},{"location":"encrypted-storage/io.matthewnelson.encrypted_storage/-prefs/create-encrypted/","text":"encrypted-storage / io.matthewnelson.encrypted_storage / Prefs / createEncrypted createEncrypted \u00b6 @JvmStatic fun createEncrypted(encryptedPrefsName: String , context: Context ): Prefs (source) Creates Prefs that will store data in an encrypted state, and decrypt that data for you. Parameters \u00b6 encryptedPrefsName - String context - Context Return Prefs that uses encryption.","title":"Create encrypted"},{"location":"encrypted-storage/io.matthewnelson.encrypted_storage/-prefs/create-encrypted/#createencrypted","text":"@JvmStatic fun createEncrypted(encryptedPrefsName: String , context: Context ): Prefs (source) Creates Prefs that will store data in an encrypted state, and decrypt that data for you.","title":"createEncrypted"},{"location":"encrypted-storage/io.matthewnelson.encrypted_storage/-prefs/create-encrypted/#parameters","text":"encryptedPrefsName - String context - Context Return Prefs that uses encryption.","title":"Parameters"},{"location":"encrypted-storage/io.matthewnelson.encrypted_storage/-prefs/create-unencrypted/","text":"encrypted-storage / io.matthewnelson.encrypted_storage / Prefs / createUnencrypted createUnencrypted \u00b6 @JvmStatic fun createUnencrypted(prefsName: String , context: Context ): Prefs (source) Creates Prefs that will store data in an **un**encrypted state Parameters \u00b6 prefsName - String context - Context Return Prefs that does not use encryption.","title":"Create unencrypted"},{"location":"encrypted-storage/io.matthewnelson.encrypted_storage/-prefs/create-unencrypted/#createunencrypted","text":"@JvmStatic fun createUnencrypted(prefsName: String , context: Context ): Prefs (source) Creates Prefs that will store data in an **un**encrypted state","title":"createUnencrypted"},{"location":"encrypted-storage/io.matthewnelson.encrypted_storage/-prefs/create-unencrypted/#parameters","text":"prefsName - String context - Context Return Prefs that does not use encryption.","title":"Parameters"},{"location":"encrypted-storage/io.matthewnelson.encrypted_storage/-prefs/get-all/","text":"encrypted-storage / io.matthewnelson.encrypted_storage / Prefs / getAll getAll \u00b6 fun getAll(): Map < String , *> (source) Retrieve all values from the preferences. Throws a NPE if nothing exists in SharedPreferences. Exceptions \u00b6 NullPointerException - Return Map<String, *>","title":"Get all"},{"location":"encrypted-storage/io.matthewnelson.encrypted_storage/-prefs/get-all/#getall","text":"fun getAll(): Map < String , *> (source) Retrieve all values from the preferences. Throws a NPE if nothing exists in SharedPreferences.","title":"getAll"},{"location":"encrypted-storage/io.matthewnelson.encrypted_storage/-prefs/get-all/#exceptions","text":"NullPointerException - Return Map<String, *>","title":"Exceptions"},{"location":"encrypted-storage/io.matthewnelson.encrypted_storage/-prefs/prefs-name/","text":"encrypted-storage / io.matthewnelson.encrypted_storage / Prefs / prefsName prefsName \u00b6 val prefsName: String (source)","title":"Prefs name"},{"location":"encrypted-storage/io.matthewnelson.encrypted_storage/-prefs/prefs-name/#prefsname","text":"val prefsName: String (source)","title":"prefsName"},{"location":"encrypted-storage/io.matthewnelson.encrypted_storage/-prefs/read/","text":"encrypted-storage / io.matthewnelson.encrypted_storage / Prefs / read read \u00b6 fun read(key: String ): Boolean ? (source) Prior to retrieving a Boolean value, will check if SharedPreferences contains the key. If it does not contain the key it will return null instead. Parameters \u00b6 key - String Exceptions \u00b6 ClassCastException - Return Boolean OR null fun read(key: String , returnIfInvalid: Boolean ): Boolean (source) Boolean fun read(key: String , returnIfInvalid: Float ): Float (source) Float fun read(key: String , returnIfInvalid: Int ): Int (source) Int fun read(key: String , returnIfInvalid: Long ): Long (source) Long fun read(key: String , returnIfInvalid: Set < String >): Set < String >? (source) Set? fun read(key: String , returnIfInvalid: String ): String ? (source) String Returns a value associated with the defined key. If that key does not exist in SharedPreferences, the value declared for returnIfInvalid will be returned instead. TIP: for returnIfInvalid , see INVALID_ constants within Prefs.Companion which coincides with the type of data you are querying for. Parameters \u00b6 key - String returnIfInvalid - Exceptions \u00b6 ClassCastException - Return Returns the preference value if it exists, or returnIfInvalid. Throws ClassCastException if there is a preference with this name that is not of the same type you are querying for.","title":"Read"},{"location":"encrypted-storage/io.matthewnelson.encrypted_storage/-prefs/read/#read","text":"fun read(key: String ): Boolean ? (source) Prior to retrieving a Boolean value, will check if SharedPreferences contains the key. If it does not contain the key it will return null instead.","title":"read"},{"location":"encrypted-storage/io.matthewnelson.encrypted_storage/-prefs/read/#parameters","text":"key - String","title":"Parameters"},{"location":"encrypted-storage/io.matthewnelson.encrypted_storage/-prefs/read/#exceptions","text":"ClassCastException - Return Boolean OR null fun read(key: String , returnIfInvalid: Boolean ): Boolean (source) Boolean fun read(key: String , returnIfInvalid: Float ): Float (source) Float fun read(key: String , returnIfInvalid: Int ): Int (source) Int fun read(key: String , returnIfInvalid: Long ): Long (source) Long fun read(key: String , returnIfInvalid: Set < String >): Set < String >? (source) Set? fun read(key: String , returnIfInvalid: String ): String ? (source) String Returns a value associated with the defined key. If that key does not exist in SharedPreferences, the value declared for returnIfInvalid will be returned instead. TIP: for returnIfInvalid , see INVALID_ constants within Prefs.Companion which coincides with the type of data you are querying for.","title":"Exceptions"},{"location":"encrypted-storage/io.matthewnelson.encrypted_storage/-prefs/read/#parameters_1","text":"key - String returnIfInvalid -","title":"Parameters"},{"location":"encrypted-storage/io.matthewnelson.encrypted_storage/-prefs/read/#exceptions_1","text":"ClassCastException - Return Returns the preference value if it exists, or returnIfInvalid. Throws ClassCastException if there is a preference with this name that is not of the same type you are querying for.","title":"Exceptions"},{"location":"encrypted-storage/io.matthewnelson.encrypted_storage/-prefs/register-on-shared-preference-change-listener/","text":"encrypted-storage / io.matthewnelson.encrypted_storage / Prefs / registerOnSharedPreferenceChangeListener registerOnSharedPreferenceChangeListener \u00b6 fun registerOnSharedPreferenceChangeListener(listener: OnSharedPreferenceChangeListener ): Unit (source) Registers an onChangeListener for SharedPreferences. Parameters \u00b6 listener - SharedPreferences.OnSharedPreferenceChangeListener","title":"Register on shared preference change listener"},{"location":"encrypted-storage/io.matthewnelson.encrypted_storage/-prefs/register-on-shared-preference-change-listener/#registeronsharedpreferencechangelistener","text":"fun registerOnSharedPreferenceChangeListener(listener: OnSharedPreferenceChangeListener ): Unit (source) Registers an onChangeListener for SharedPreferences.","title":"registerOnSharedPreferenceChangeListener"},{"location":"encrypted-storage/io.matthewnelson.encrypted_storage/-prefs/register-on-shared-preference-change-listener/#parameters","text":"listener - SharedPreferences.OnSharedPreferenceChangeListener","title":"Parameters"},{"location":"encrypted-storage/io.matthewnelson.encrypted_storage/-prefs/remove/","text":"encrypted-storage / io.matthewnelson.encrypted_storage / Prefs / remove remove \u00b6 fun remove(key: String ): Prefs (source) Removes the key value pair associated with the defined key. Parameters \u00b6 key - String Return Prefs for chaining multiple method calls together.","title":"Remove"},{"location":"encrypted-storage/io.matthewnelson.encrypted_storage/-prefs/remove/#remove","text":"fun remove(key: String ): Prefs (source) Removes the key value pair associated with the defined key.","title":"remove"},{"location":"encrypted-storage/io.matthewnelson.encrypted_storage/-prefs/remove/#parameters","text":"key - String Return Prefs for chaining multiple method calls together.","title":"Parameters"},{"location":"encrypted-storage/io.matthewnelson.encrypted_storage/-prefs/unregister-on-shared-preference-change-listener/","text":"encrypted-storage / io.matthewnelson.encrypted_storage / Prefs / unregisterOnSharedPreferenceChangeListener unregisterOnSharedPreferenceChangeListener \u00b6 fun unregisterOnSharedPreferenceChangeListener(listener: OnSharedPreferenceChangeListener ): Unit (source) Unregisters an onChangeListener for SharedPreferences. Parameters \u00b6 listener - SharedPreferences.OnSharedPreferenceChangeListener","title":"Unregister on shared preference change listener"},{"location":"encrypted-storage/io.matthewnelson.encrypted_storage/-prefs/unregister-on-shared-preference-change-listener/#unregisteronsharedpreferencechangelistener","text":"fun unregisterOnSharedPreferenceChangeListener(listener: OnSharedPreferenceChangeListener ): Unit (source) Unregisters an onChangeListener for SharedPreferences.","title":"unregisterOnSharedPreferenceChangeListener"},{"location":"encrypted-storage/io.matthewnelson.encrypted_storage/-prefs/unregister-on-shared-preference-change-listener/#parameters","text":"listener - SharedPreferences.OnSharedPreferenceChangeListener","title":"Parameters"},{"location":"encrypted-storage/io.matthewnelson.encrypted_storage/-prefs/write/","text":"encrypted-storage / io.matthewnelson.encrypted_storage / Prefs / write write \u00b6 fun write(key: String , value: Boolean ): Prefs (source) Boolean fun write(key: String , value: Float ): Prefs (source) Float fun write(key: String , value: Int ): Prefs (source) Int fun write(key: String , value: Long ): Prefs (source) Long fun write(key: String , value: Set < String >): Prefs (source) Set fun write(key: String , value: String ): Prefs (source) Writes the key value pair to SharedPreferences. Will try to write the kvp using commit() first, which if unsuccessful, will fall back to using apply() . Parameters \u00b6 key - String value - Return Prefs for chaining multiple method calls together.","title":"Write"},{"location":"encrypted-storage/io.matthewnelson.encrypted_storage/-prefs/write/#write","text":"fun write(key: String , value: Boolean ): Prefs (source) Boolean fun write(key: String , value: Float ): Prefs (source) Float fun write(key: String , value: Int ): Prefs (source) Int fun write(key: String , value: Long ): Prefs (source) Long fun write(key: String , value: Set < String >): Prefs (source) Set fun write(key: String , value: String ): Prefs (source) Writes the key value pair to SharedPreferences. Will try to write the kvp using commit() first, which if unsuccessful, will fall back to using apply() .","title":"write"},{"location":"encrypted-storage/io.matthewnelson.encrypted_storage/-prefs/write/#parameters","text":"key - String value - Return Prefs for chaining multiple method calls together.","title":"Parameters"}]}